/**
 * MOLGENIS REST API
 * Documentation for the MOLGENIS Rest API V1 and V2
 * <p>
 * OpenAPI spec version: v1 and v2
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.molgenis.graphql.model;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

public class EntityType
{
	final private org.molgenis.data.meta.model.EntityType entityType;

	public EntityType(org.molgenis.data.meta.model.EntityType entityType)
	{
		this.entityType = Objects.requireNonNull(entityType);
	}

	public Object getId()
	{
		return entityType.getIdValue();
	}

	public String getName()
	{
		return entityType.getFullyQualifiedName();
	}

	public String getLabel()
	{
		return entityType.getLabel();
	}

	public List<Attribute> getAttributes()
	{
		return StreamSupport.stream(entityType.getAttributes().spliterator(), false).map(Attribute::new)
				.collect(Collectors.toList());
	}

	public Attribute getLabelAttribute()
	{
		return new Attribute(entityType.getLabelAttribute());
	}

	public Attribute getIdAttribute()
	{
		return new Attribute(entityType.getIdAttribute());
	}

	public List<Attribute> getLookupAttributes()
	{
		return StreamSupport.stream(entityType.getLookupAttributes().spliterator(), false).map(Attribute::new)
				.collect(Collectors.toList());
	}

	public boolean isAbstract()
	{
		return entityType.isAbstract();
	}

}

