/**
 * MOLGENIS REST API
 * Documentation for the MOLGENIS Rest API V1 and V2
 *
 * OpenAPI spec version: v1 and v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.LoginResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.LoginRequest;
import io.swagger.client.model.CopyEntityRequest;
import io.swagger.client.model.ErrorMessageResponse;
import io.swagger.client.model.EntityCollectionResponseV2;
import io.swagger.client.model.EntityCollectionRequestV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VApi {
    private ApiClient apiClient;

    public VApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for v1LoginPost */
    private com.squareup.okhttp.Call v1LoginPostCall(LoginRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1LoginPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1/login".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Logs into a MOLGENIS user account
     * 
     * @param body User credentials (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoginResponse v1LoginPost(LoginRequest body) throws ApiException {
        ApiResponse<LoginResponse> resp = v1LoginPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Logs into a MOLGENIS user account
     * 
     * @param body User credentials (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoginResponse> v1LoginPostWithHttpInfo(LoginRequest body) throws ApiException {
        com.squareup.okhttp.Call call = v1LoginPostCall(body, null, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Logs into a MOLGENIS user account (asynchronously)
     * 
     * @param body User credentials (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1LoginPostAsync(LoginRequest body, final ApiCallback<LoginResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1LoginPostCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v2CopyEntityNamePost */
    private com.squareup.okhttp.Call v2CopyEntityNamePostCall(String entityName, CopyEntityRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2CopyEntityNamePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2CopyEntityNamePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/copy/{entity_name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a copy of an entity.
     * The copy will be created in the same package and backend as the original entity, so both must be writable.
     * @param entityName Name of the entity (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2CopyEntityNamePost(String entityName, CopyEntityRequest body) throws ApiException {
        v2CopyEntityNamePostWithHttpInfo(entityName, body);
    }

    /**
     * Creates a copy of an entity.
     * The copy will be created in the same package and backend as the original entity, so both must be writable.
     * @param entityName Name of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2CopyEntityNamePostWithHttpInfo(String entityName, CopyEntityRequest body) throws ApiException {
        com.squareup.okhttp.Call call = v2CopyEntityNamePostCall(entityName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a copy of an entity. (asynchronously)
     * The copy will be created in the same package and backend as the original entity, so both must be writable.
     * @param entityName Name of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2CopyEntityNamePostAsync(String entityName, CopyEntityRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2CopyEntityNamePostCall(entityName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v2EntityNameGet */
    private com.squareup.okhttp.Call v2EntityNameGetCall(String entityName, List<String> attrs, String q, String aggs, List<String> sort, Integer start, Integer num, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2EntityNameGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/{entity_name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (attrs != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "attrs", attrs));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (aggs != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "aggs", aggs));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (num != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "num", num));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves an entity collection
     * Retrieves an entity collection based on entity name
     * @param entityName Name of the entity (required)
     * @param attrs Defines which fields from the Entity to select. For each attribute that references another entity, may be postfixed with the attrs to fetch for that entity, between (). Special attribute names are ~id and ~lbl for the idAttribute and labelAttribute respectively. (optional)
     * @param q RSQL query to filter the Entity collection response (optional)
     * @param aggs RSQL query to filter the Entity collection aggregates. The aggregation query supports the RSQL selectors &#39;x&#39;, &#39;y&#39; and &#39;distinct&#39; and the RSQL operator &#39;&#x3D;&#x3D;&#39;. The selector &#39;x&#39; defines the first aggregation attribute name, &#39;y&#39; defines the second aggregation attribute name, &#39;distinct&#39; defines the distinct aggregation attribute name. (optional)
     * @param sort Sort specification. Format is a comma separated list of attribute names. Each name may be followed by :asc or :desc to indicate sort order. Default sort order is ascending. (optional)
     * @param start Offset in resource collection (optional, default to 0)
     * @param num Number of resources to retrieve starting at start (optional, default to 0)
     * @return EntityCollectionResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCollectionResponseV2 v2EntityNameGet(String entityName, List<String> attrs, String q, String aggs, List<String> sort, Integer start, Integer num) throws ApiException {
        ApiResponse<EntityCollectionResponseV2> resp = v2EntityNameGetWithHttpInfo(entityName, attrs, q, aggs, sort, start, num);
        return resp.getData();
    }

    /**
     * Retrieves an entity collection
     * Retrieves an entity collection based on entity name
     * @param entityName Name of the entity (required)
     * @param attrs Defines which fields from the Entity to select. For each attribute that references another entity, may be postfixed with the attrs to fetch for that entity, between (). Special attribute names are ~id and ~lbl for the idAttribute and labelAttribute respectively. (optional)
     * @param q RSQL query to filter the Entity collection response (optional)
     * @param aggs RSQL query to filter the Entity collection aggregates. The aggregation query supports the RSQL selectors &#39;x&#39;, &#39;y&#39; and &#39;distinct&#39; and the RSQL operator &#39;&#x3D;&#x3D;&#39;. The selector &#39;x&#39; defines the first aggregation attribute name, &#39;y&#39; defines the second aggregation attribute name, &#39;distinct&#39; defines the distinct aggregation attribute name. (optional)
     * @param sort Sort specification. Format is a comma separated list of attribute names. Each name may be followed by :asc or :desc to indicate sort order. Default sort order is ascending. (optional)
     * @param start Offset in resource collection (optional, default to 0)
     * @param num Number of resources to retrieve starting at start (optional, default to 0)
     * @return ApiResponse&lt;EntityCollectionResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCollectionResponseV2> v2EntityNameGetWithHttpInfo(String entityName, List<String> attrs, String q, String aggs, List<String> sort, Integer start, Integer num) throws ApiException {
        com.squareup.okhttp.Call call = v2EntityNameGetCall(entityName, attrs, q, aggs, sort, start, num, null, null);
        Type localVarReturnType = new TypeToken<EntityCollectionResponseV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an entity collection (asynchronously)
     * Retrieves an entity collection based on entity name
     * @param entityName Name of the entity (required)
     * @param attrs Defines which fields from the Entity to select. For each attribute that references another entity, may be postfixed with the attrs to fetch for that entity, between (). Special attribute names are ~id and ~lbl for the idAttribute and labelAttribute respectively. (optional)
     * @param q RSQL query to filter the Entity collection response (optional)
     * @param aggs RSQL query to filter the Entity collection aggregates. The aggregation query supports the RSQL selectors &#39;x&#39;, &#39;y&#39; and &#39;distinct&#39; and the RSQL operator &#39;&#x3D;&#x3D;&#39;. The selector &#39;x&#39; defines the first aggregation attribute name, &#39;y&#39; defines the second aggregation attribute name, &#39;distinct&#39; defines the distinct aggregation attribute name. (optional)
     * @param sort Sort specification. Format is a comma separated list of attribute names. Each name may be followed by :asc or :desc to indicate sort order. Default sort order is ascending. (optional)
     * @param start Offset in resource collection (optional, default to 0)
     * @param num Number of resources to retrieve starting at start (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2EntityNameGetAsync(String entityName, List<String> attrs, String q, String aggs, List<String> sort, Integer start, Integer num, final ApiCallback<EntityCollectionResponseV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2EntityNameGetCall(entityName, attrs, q, aggs, sort, start, num, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCollectionResponseV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v2EntityNameIdDelete */
    private com.squareup.okhttp.Call v2EntityNameIdDeleteCall(String entityName, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2EntityNameIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2EntityNameIdDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/{entity_name}/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an entity
     * Deletes an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2EntityNameIdDelete(String entityName, String id) throws ApiException {
        v2EntityNameIdDeleteWithHttpInfo(entityName, id);
    }

    /**
     * Deletes an entity
     * Deletes an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2EntityNameIdDeleteWithHttpInfo(String entityName, String id) throws ApiException {
        com.squareup.okhttp.Call call = v2EntityNameIdDeleteCall(entityName, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an entity (asynchronously)
     * Deletes an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2EntityNameIdDeleteAsync(String entityName, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2EntityNameIdDeleteCall(entityName, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v2EntityNameIdGet */
    private com.squareup.okhttp.Call v2EntityNameIdGetCall(String entityName, String id, String attrs, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2EntityNameIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2EntityNameIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/{entity_name}/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (attrs != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "attrs", attrs));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves an entity
     * Retrieves an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @param attrs Defines which fields from the Entity to select (optional)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2EntityNameIdGet(String entityName, String id, String attrs, String method) throws ApiException {
        v2EntityNameIdGetWithHttpInfo(entityName, id, attrs, method);
    }

    /**
     * Retrieves an entity
     * Retrieves an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @param attrs Defines which fields from the Entity to select (optional)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2EntityNameIdGetWithHttpInfo(String entityName, String id, String attrs, String method) throws ApiException {
        com.squareup.okhttp.Call call = v2EntityNameIdGetCall(entityName, id, attrs, method, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieves an entity (asynchronously)
     * Retrieves an entity instance based on entity name and ID
     * @param entityName Name of the entity (required)
     * @param id ID of the entity instance (required)
     * @param attrs Defines which fields from the Entity to select (optional)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2EntityNameIdGetAsync(String entityName, String id, String attrs, String method, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2EntityNameIdGetCall(entityName, id, attrs, method, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v2EntityNameMetaAttributeNameGet */
    private com.squareup.okhttp.Call v2EntityNameMetaAttributeNameGetCall(String entityName, String attributeName, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2EntityNameMetaAttributeNameGet(Async)");
        }
        
        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling v2EntityNameMetaAttributeNameGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/{entity_name}/meta/{attribute_name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()))
        .replaceAll("\\{" + "attribute_name" + "\\}", apiClient.escapeString(attributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve attribute metadata
     * Retrieve attribute metadata based on entity name and attribute name
     * @param entityName Name of the entity (required)
     * @param attributeName Name of the attribute (required)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2EntityNameMetaAttributeNameGet(String entityName, String attributeName, String method) throws ApiException {
        v2EntityNameMetaAttributeNameGetWithHttpInfo(entityName, attributeName, method);
    }

    /**
     * Retrieve attribute metadata
     * Retrieve attribute metadata based on entity name and attribute name
     * @param entityName Name of the entity (required)
     * @param attributeName Name of the attribute (required)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2EntityNameMetaAttributeNameGetWithHttpInfo(String entityName, String attributeName, String method) throws ApiException {
        com.squareup.okhttp.Call call = v2EntityNameMetaAttributeNameGetCall(entityName, attributeName, method, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve attribute metadata (asynchronously)
     * Retrieve attribute metadata based on entity name and attribute name
     * @param entityName Name of the entity (required)
     * @param attributeName Name of the attribute (required)
     * @param method Tunnel request through defined method over default API operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2EntityNameMetaAttributeNameGetAsync(String entityName, String attributeName, String method, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2EntityNameMetaAttributeNameGetCall(entityName, attributeName, method, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for v2EntityNamePost */
    private com.squareup.okhttp.Call v2EntityNamePostCall(String method, String entityName, EntityCollectionRequestV2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling v2EntityNamePost(Async)");
        }
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling v2EntityNamePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2EntityNamePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v2/{entity_name}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entity_name" + "\\}", apiClient.escapeString(entityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves an entity collection
     * Retrieves an entity collection based on entity name
     * @param method Tunnels the GET method over a POST request, allowing you to put the request in the body (required)
     * @param entityName Name of the entity (required)
     * @param body Entity collection retrieval request (required)
     * @return EntityCollectionResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCollectionResponseV2 v2EntityNamePost(String method, String entityName, EntityCollectionRequestV2 body) throws ApiException {
        ApiResponse<EntityCollectionResponseV2> resp = v2EntityNamePostWithHttpInfo(method, entityName, body);
        return resp.getData();
    }

    /**
     * Retrieves an entity collection
     * Retrieves an entity collection based on entity name
     * @param method Tunnels the GET method over a POST request, allowing you to put the request in the body (required)
     * @param entityName Name of the entity (required)
     * @param body Entity collection retrieval request (required)
     * @return ApiResponse&lt;EntityCollectionResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCollectionResponseV2> v2EntityNamePostWithHttpInfo(String method, String entityName, EntityCollectionRequestV2 body) throws ApiException {
        com.squareup.okhttp.Call call = v2EntityNamePostCall(method, entityName, body, null, null);
        Type localVarReturnType = new TypeToken<EntityCollectionResponseV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an entity collection (asynchronously)
     * Retrieves an entity collection based on entity name
     * @param method Tunnels the GET method over a POST request, allowing you to put the request in the body (required)
     * @param entityName Name of the entity (required)
     * @param body Entity collection retrieval request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2EntityNamePostAsync(String method, String entityName, EntityCollectionRequestV2 body, final ApiCallback<EntityCollectionResponseV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2EntityNamePostCall(method, entityName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCollectionResponseV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for v2VersionGet */
    private com.squareup.okhttp.Call v2VersionGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/v2/version".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieves the MOLGENIS version
     * Retrieves the MOLGENIS version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2VersionGet() throws ApiException {
        v2VersionGetWithHttpInfo();
    }

    /**
     * Retrieves the MOLGENIS version
     * Retrieves the MOLGENIS version
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2VersionGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v2VersionGetCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieves the MOLGENIS version (asynchronously)
     * Retrieves the MOLGENIS version
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2VersionGetAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2VersionGetCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
